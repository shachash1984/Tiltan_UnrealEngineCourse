CPP:
Create and implement the following classes with all member variables and functions
Please read the instructions carefully and make sure that:
the project compiles and there are no memory leaks

1. ***All classes and structs should have a decleration file (.h) and a definition file (.cpp)***
2. ***You should consider which items should be private or public***
3. ***Every ToString method has the wanted format***
4. ***You need to decide where to add const for either variables or methods***
5. ***World position is the position of the mesh + the offset of the position of the vertex***
6. ***Notice place holders in square brackets***
7. ***You can use std::to_string() to convert float/int to strings***
8. ***Remember to use const where needed***
9. ***Every Mesh needs at least 30 vertices with different values***
10. ***Every "new" must have a matching "delete"***
11. ***Every Object that holds another object as a member, needs to call the "ToString" method of the object as part of its own "ToString" function***
12. ***Use correct casting if needed***



	Create a Point struct with the following:
	Member variables:
		float x, y, z
		
	default Constructor
	Constructor(_x, _y, _z)
	copy Constructor(Point other)
	Destructor
	string ToString() //format example: "(1.2, -15.0, 0.1)"
	float GetX()
	float GetY()
	float GetZ()
	void SetX(float _x)
	void SetY(float _y)
	void SetZ(float _z)
	
	
	Create a Color struct with the following:
	Member variables:
		float r, g, b, a (valid values are only between 0.0f and 1.0f)
	Member functions:
		default Constructor
		Constructor(_r, _g, _b, _a)
		copy Constructor(Color other)
		Destructor
		string ToString() //format example: "(0.5, 0.2, 1.0, 1.0)"
		void Set(float _r, float _g, float _b, float _a);

	Create a Vertex class with the following:
	Member variables:
		Point position
		Color color
	Member functions:
		default Constructor
		Constructor(Point _pos, Color _col)
		copy Constructor(Vertex other)
		Destructor
		string ToString() //format example: "Position: (1.2, -15.0, 0.1) Color: (0.5, 0.2, 1.0, 1.0)"
		Point GetPosition()
		void SetPosition(float x, float y, float z)
		Color GetColor()
		void SetColor(float r, float g, float b, float a)
		
	
	Create a Mesh Class with the following:
	Member variables:
		string name
		vector<Vertex> vertices
		Point position
	Member functions:
		default Constructor
		Constructor(string _name, Point _position, vector<Vertex> _vertices)
		//should print the entire list of vertices
		string ToString() //format example: "Name:[WEAPON_NAME]\n Position:[POSITION] Vertices: Vertex [INDEX]: Position: (1.2, -15.0, 0.1) Color: (0.5, 0.2, 1.0, 1.0)\n"
		Point GetPosition()
		void SetPosition()
		Point GetVertexWorldPosition(unsigned int index) // should return the position of the vertex + the position of the mesh
		
	Create a Player class with the following:
	Member variables:
		string name
		Mesh* PlayerBody
		Mesh* PlayerWeapon
	Member functions:
		default Constructor (should initialize Body and Weapon to nullptr)
		Constructor (_name, _body, _weapon)
		Destructor
		string ToString() //format example: "Player: Name: [PLAYER_NAME]\n Body:...[BODY_MESH_STRING] \n Weapon:...{WEAPON_MESH_STRING] "
		
	In main():
	Create both in static memory(stack) and dynamic memory(heap), a Player Instance that has a body and a weapon (the weapon and body are created separatly and passed as pointers)
	call the toString method of the player from cout and make sure it prints all the details correctly
	
	
	
